// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(STAFF)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

// Enum for user roles
enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

// Order model
model Order {
  id            String      @id @default(cuid())
  orderNumber   Int         @unique @default(autoincrement())
  status        OrderStatus @default(PENDING)
  total         Decimal     @default(0)
  tableNumber   Int?
  customerName  String?
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
}

// Enum for order status
enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

// Order item model
model OrderItem {
  id            String   @id @default(cuid())
  quantity      Int
  price         Decimal
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  orderId       String
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId    String
  menuItem      MenuItem @relation(fields: [menuItemId], references: [id])
}

// Menu item model
model MenuItem {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Decimal
  image         String?
  isAvailable   Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]
}

// Category model
model Category {
  id            String     @id @default(cuid())
  name          String
  description   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  menuItems     MenuItem[]
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
